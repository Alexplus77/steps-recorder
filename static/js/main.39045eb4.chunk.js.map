{"version":3,"sources":["components/Form.js","components/ItemResult.js","components/ResultList.js","App.js","index.js"],"names":["Form","handleDate","handleSubmit","handleSteps","steps","date","edit","onSubmit","className","htmlFor","onChange","type","id","name","value","format","Date","required","readOnly","placeholder","ItemResult","handleRemove","handleEdit","cn","onClick","ResultList","tableData","Fragment","length","map","nanoid","App","useState","setDate","setSteps","setEdit","setTableData","formattedDate","target","alert","e","preventDefault","foundId","find","d","reduce","acc","item","Number","sumSteps","updateData","el","idItem","dateItem","distance","foundEdit","console","log","updateSubmit","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39045eb4.chunk.js","sourcesContent":["import \"App.css\";\nimport { format } from \"date-fns\";\n\nconst Form = ({ handleDate, handleSubmit, handleSteps, steps, date, edit }) => {\n  return (\n    <form onSubmit={handleSubmit} className=\"form\">\n      <label className=\"labelDate\" htmlFor=\"date\">\n        Дата(ДД.ММ.ГГ)\n      </label>\n      <label className=\"labelDistance\" htmlFor=\"distance\">\n        Пройдено км\n      </label>\n      <input\n        onChange={handleDate}\n        type=\"date\"\n        className=\"inputDate\"\n        id=\"date\"\n        name=\"date\"\n        value={format(new Date(date), \"yyyy-MM-dd\")}\n        required={true}\n        readOnly={edit && true}\n      />\n      <input\n        type=\"number\"\n        onChange={handleSteps}\n        required={true}\n        className=\"inputDistance\"\n        id=\"distance\"\n        name=\"distance\"\n        value={steps}\n        placeholder=\"Number\"\n      />\n      <button onSubmit={handleSubmit} className=\"submit\" type=\"submit\">\n        Ok\n      </button>\n    </form>\n  );\n};\nexport default Form;\n","import \"App.css\";\nimport React from \"react\";\nimport cn from \"classnames\";\nconst ItemResult = ({ id, date, steps, handleRemove, handleEdit, edit }) => {\n  return (\n    <li className={cn(\"itemResult\", { \"itemResult activeItem\": edit })}>\n      <span>{date}</span>\n      <span>{steps}</span>\n      <div className=\"icons\">\n        <i\n          className={cn(\"fa fa-pencil  fa-flip-horizontal\", {\n            \" fa-pencil-square-o\": edit,\n          })}\n          aria-hidden=\"true\"\n          onClick={() => handleEdit(id, date, steps)}\n        />\n        <i\n          className=\"fa fa-times\"\n          onClick={() => !edit && handleRemove(id)}\n          aria-hidden=\"true\"\n        />\n      </div>\n    </li>\n  );\n};\nexport default ItemResult;\n","import \"App.css\";\nimport React from \"react\";\nimport ItemResult from \"./ItemResult\";\nimport { nanoid } from \"nanoid\";\nconst ResultList = ({ tableData, handleRemove, handleEdit }) => {\n  return (\n    <React.Fragment>\n      <div className=\"titleResult\">\n        <span>Дата(ДД.ММ.ГГ)</span>\n        <span>Пройдено км</span>\n        <span>Действия</span>\n      </div>\n      <ul className=\"resultList\">\n        {tableData.length > 0 ? (\n          tableData.map(({ date, steps, id, edit }) => (\n            <ItemResult\n              key={nanoid()}\n              date={date}\n              handleRemove={handleRemove}\n              handleEdit={handleEdit}\n              steps={steps}\n              id={id}\n              edit={edit}\n            />\n          ))\n        ) : (\n          <li className=\"noData\">No data to display</li>\n        )}\n      </ul>\n    </React.Fragment>\n  );\n};\nexport default ResultList;\n","import \"App.css\";\nimport Form from \"components/Form\";\nimport ResultList from \"components/ResultList\";\nimport { useState } from \"react\";\nimport { format } from \"date-fns\";\n\nconst App = () => {\n  const [date, setDate] = useState(new Date());\n  const [steps, setSteps] = useState(1);\n  const [edit, setEdit] = useState(false);\n\n  const [tableData, setTableData] = useState([]);\n  const formattedDate = format(new Date(date), \"dd-MM-yyyy\");\n\n  const handleDate = ({ target: { value } }) => {\n    if (\n      format(new Date(value), \"dd-MM-yyyy\") > format(new Date(), \"dd-MM-yyyy\")\n    ) {\n      alert(\"Дата не может быть больше текущей даты\");\n    } else {\n      setDate(value);\n    }\n  };\n  const handleSteps = ({ target }) => {\n    setSteps(target.value);\n  };\n  const clearForm = () => {\n    setDate(new Date());\n    setSteps(1);\n    setEdit(false);\n  };\n  const sumSteps = (foundId) => {\n    return tableData.reduce((acc, item) => {\n      if (item.id === foundId) {\n        return [\n          ...acc,\n          {\n            ...item,\n            steps: Number(item.steps) + Number(steps),\n          },\n        ];\n      }\n      item.edit = false;\n      return [...acc, item];\n    }, []);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (steps <= 0 || !date) {\n      return;\n    }\n    const foundId = tableData.find((d) => d.id === formattedDate)?.id;\n\n    if (foundId && !edit) {\n      setTableData(sumSteps(foundId));\n    } else if (edit) {\n      const updateData = tableData.map((el) => {\n        if (el.id === foundId) {\n          el.steps = steps;\n          el.id = formattedDate;\n          el.date = formattedDate;\n          el.edit = false;\n        }\n\n        return el;\n      });\n      setTableData(updateData);\n    } else {\n      setTableData([\n        ...tableData,\n        {\n          id: formattedDate,\n          date: formattedDate,\n          steps,\n        },\n      ]);\n    }\n    clearForm();\n  };\n\n  const handleRemove = (idItem) => {\n    const updateSubmit = tableData.filter(({ id }) => id !== idItem);\n    setTableData(updateSubmit);\n  };\n\n  const handleEdit = (idItem, dateItem, distance) => {\n    setDate(format(new Date(dateItem), \"dd-MM-yyyy\"));\n    const foundEdit = tableData.find((el) => el.id === idItem);\n    console.log(foundEdit);\n    foundEdit.edit = !edit;\n    setEdit(!edit);\n    setSteps(distance);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"title\">Учёт тренировок</div>\n      <Form\n        handleDate={handleDate}\n        handleSteps={handleSteps}\n        handleSubmit={handleSubmit}\n        date={date}\n        steps={steps}\n        edit={edit}\n      />\n      <ResultList\n        handleEdit={handleEdit}\n        handleRemove={handleRemove}\n        tableData={tableData}\n        edit={edit}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}